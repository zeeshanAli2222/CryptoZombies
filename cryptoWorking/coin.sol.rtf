{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red172\green172\blue193;\red70\green137\blue204;\red26\green26\blue41;
\red212\green212\blue212;\red167\green197\blue152;\red79\green123\blue61;\red45\green175\blue118;\red253\green181\blue13;
\red237\green114\blue173;\red140\green108\blue11;\red13\green102\blue149;\red31\green133\blue64;}
{\*\expandedcolortbl;;\cssrgb\c72941\c73333\c80000;\cssrgb\c33725\c61176\c83922;\cssrgb\c13333\c13725\c21176;
\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c37647\c54510\c30588;\cssrgb\c19608\c72941\c53725;\cssrgb\c100000\c75686\c2745;
\cssrgb\c95294\c54118\c73333;\cssrgb\c61961\c49412\c3137;\cssrgb\c0\c47843\c65098;\cssrgb\c12941\c58039\c31765;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 pragma\cf2 \strokec2  \cf3 \strokec3 solidity\cf2 \strokec2  \cf5 \strokec5 ^\cf6 \strokec6 0.8.0\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7 //interface tokenRecipient \{ \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4   \cf7 \strokec7 //  function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7 //\}\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 contract\cf2 \strokec2  TokenERC20 \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf7 \strokec7 // Public variables of the token\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 string\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  name\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 string\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  symbol\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 uint8\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  decimals \cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 18\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 // 18 decimals is the strongly suggested default, avoid changing it\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 uint256\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  totalSupply\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 // This creates an array with all balances\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 mapping\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  => \cf3 \strokec3 uint256\cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  balanceOf\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 mapping\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  => \cf3 \strokec3 mapping\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  => \cf3 \strokec3 uint256\cf5 \strokec5 ))\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  allowance\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 // This generates a public event on the blockchain that will notify clients\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 event\cf2 \strokec2  Transfer\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  \cf9 \strokec9 indexed\cf2 \strokec2  from\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 address\cf2 \strokec2  \cf9 \strokec9 indexed\cf2 \strokec2  to\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint256\cf2 \strokec2  value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4     \cb1 \
\cb4     \cf7 \strokec7 // This generates a public event on the blockchain that will notify clients\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 event\cf2 \strokec2  Approval\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  \cf9 \strokec9 indexed\cf2 \strokec2  _owner\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 address\cf2 \strokec2  \cf9 \strokec9 indexed\cf2 \strokec2  _spender\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint256\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 // This notifies clients about the amount burnt\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 event\cf2 \strokec2  Burn\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  \cf9 \strokec9 indexed\cf2 \strokec2  from\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint256\cf2 \strokec2  value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7      * Constructor function\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * Initializes contract with initial supply tokens to the creator of the contract\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf10 \strokec10 constructor\cf5 \strokec5 (\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 uint256\cf2 \strokec2  initialSupply\cf5 \strokec5 ,\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 string\cf2 \strokec2  \cf11 \strokec11 memory\cf2 \strokec2  tokenName\cf5 \strokec5 ,\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 string\cf2 \strokec2  \cf11 \strokec11 memory\cf2 \strokec2  tokenSymbol\cb1 \
\cb4     \cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\cb4         totalSupply \cf5 \strokec5 =\cf2 \strokec2  initialSupply \cf5 \strokec5 *\cf2 \strokec2  \cf6 \strokec6 10\cf2 \strokec2  ** \cf3 \strokec3 uint256\cf5 \strokec5 (\cf2 \strokec2 decimals\cf5 \strokec5 );\cf2 \strokec2   \cf7 \strokec7 // Update total supply with the decimal amount\cf2 \cb1 \strokec2 \
\cb4         balanceOf\cf5 \strokec5 [\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  totalSupply\cf5 \strokec5 ;\cf2 \strokec2                 \cf7 \strokec7 // Give the creator all initial tokens\cf2 \cb1 \strokec2 \
\cb4         name \cf5 \strokec5 =\cf2 \strokec2  tokenName\cf5 \strokec5 ;\cf2 \strokec2                                    \cf7 \strokec7 // Set the name for display purposes\cf2 \cb1 \strokec2 \
\cb4         symbol \cf5 \strokec5 =\cf2 \strokec2  tokenSymbol\cf5 \strokec5 ;\cf2 \strokec2                                \cf7 \strokec7 // Set the symbol for display purposes\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7      * Internal transfer, only can be called by this contract\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 function\cf2 \strokec2  _transfer\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  _from\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 address\cf2 \strokec2  _to\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint\cf2 \strokec2  _value\cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4         \cf7 \strokec7 // Check if the sender has enough\cf2 \cb1 \strokec2 \
\cb4         \cf12 \strokec12 require\cf5 \strokec5 (\cf2 \strokec2 balanceOf\cf5 \strokec5 [\cf2 \strokec2 _from\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 >=\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4        \cb1 \
\cb4         \cf7 \strokec7 // Subtract from the sender\cf2 \cb1 \strokec2 \
\cb4         balanceOf\cf5 \strokec5 [\cf2 \strokec2 _from\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 -=\cf2 \strokec2  _value\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 // Add the same to the recipient\cf2 \cb1 \strokec2 \
\cb4         balanceOf\cf5 \strokec5 [\cf2 \strokec2 _to\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 +=\cf2 \strokec2  _value\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 emit\cf2 \strokec2  Transfer\cf5 \strokec5 (\cf2 \strokec2 _from\cf5 \strokec5 ,\cf2 \strokec2  _to\cf5 \strokec5 ,\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4     \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7      * Transfer tokens\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * Send `_value` tokens to `_to` from your account\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _to The address of the recipient\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _value the amount to send\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 function\cf2 \strokec2  transfer\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  _to\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint256\cf2 \strokec2  _value\cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf13 \strokec13 returns\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 bool\cf2 \strokec2  success\cf5 \strokec5 )\cf2 \strokec2  \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\cb4         _transfer\cf5 \strokec5 (\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ,\cf2 \strokec2  _to\cf5 \strokec5 ,\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 return\cf2 \strokec2  \cf3 \strokec3 true\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7      * Transfer tokens from other address\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * Send `_value` tokens to `_to` on behalf of `_from`\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _from The address of the sender\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _to The address of the recipient\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _value the amount to send\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 function\cf2 \strokec2  transferFrom\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  _from\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 address\cf2 \strokec2  _to\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint256\cf2 \strokec2  _value\cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf13 \strokec13 returns\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 bool\cf2 \strokec2  success\cf5 \strokec5 )\cf2 \strokec2  \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\cb4         \cf12 \strokec12 require\cf5 \strokec5 (\cf2 \strokec2 _value \cf5 \strokec5 <=\cf2 \strokec2  allowance\cf5 \strokec5 [\cf2 \strokec2 _from\cf5 \strokec5 ][\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ]);\cf2 \strokec2      \cf7 \strokec7 // Check allowance\cf2 \cb1 \strokec2 \
\cb4         allowance\cf5 \strokec5 [\cf2 \strokec2 _from\cf5 \strokec5 ][\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 -=\cf2 \strokec2  _value\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4         _transfer\cf5 \strokec5 (\cf2 \strokec2 _from\cf5 \strokec5 ,\cf2 \strokec2  _to\cf5 \strokec5 ,\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 return\cf2 \strokec2  \cf3 \strokec3 true\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf7 \strokec7 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7      * Set allowance for other address\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * Allows `_spender` to spend no more than `_value` tokens on your behalf\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      *\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _spender The address authorized to spend\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      * @param _value the max amount they can spend\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 function\cf2 \strokec2  approve\cf5 \strokec5 (\cf3 \strokec3 address\cf2 \strokec2  _spender\cf5 \strokec5 ,\cf2 \strokec2  \cf3 \strokec3 uint256\cf2 \strokec2  _value\cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 returns\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 bool\cf2 \strokec2  success\cf5 \strokec5 )\cf2 \strokec2  \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\cb4         allowance\cf5 \strokec5 [\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ][\cf2 \strokec2 _spender\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  _value\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 emit\cf2 \strokec2  Approval\cf5 \strokec5 (\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ,\cf2 \strokec2  _spender\cf5 \strokec5 ,\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 return\cf2 \strokec2  \cf3 \strokec3 true\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cb1 \
\cb4     \cb1 \
\cb4     \cb1 \
\
\cb4     \cb1 \
\cb4     \cf7 \strokec7 //  Destroy tokens\cf2 \cb1 \strokec2 \
\cb4      \cb1 \
\cb4     \cf3 \strokec3 function\cf2 \strokec2  burn\cf5 \strokec5 (\cf3 \strokec3 uint256\cf2 \strokec2  _value\cf5 \strokec5 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf13 \strokec13 returns\cf2 \strokec2  \cf5 \strokec5 (\cf3 \strokec3 bool\cf2 \strokec2  success\cf5 \strokec5 )\cf2 \strokec2  \cf5 \strokec5 \{\cf2 \cb1 \strokec2 \
\cb4         \cf12 \strokec12 require\cf5 \strokec5 (\cf2 \strokec2 balanceOf\cf5 \strokec5 [\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 >=\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \strokec2    \cb1 \
\cb4         balanceOf\cf5 \strokec5 [\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ]\cf2 \strokec2  \cf5 \strokec5 -=\cf2 \strokec2  _value\cf5 \strokec5 ;\cf2 \strokec2             \cb1 \
\cb4         totalSupply \cf5 \strokec5 -=\cf2 \strokec2  _value\cf5 \strokec5 ;\cf2 \strokec2                       \cb1 \
\cb4         \cf3 \strokec3 emit\cf2 \strokec2  Burn\cf5 \strokec5 (\cf12 \strokec12 msg\cf5 \strokec5 .\cf2 \strokec2 sender\cf5 \strokec5 ,\cf2 \strokec2  _value\cf5 \strokec5 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 return\cf2 \strokec2  \cf3 \strokec3 true\cf5 \strokec5 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\cb4     \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\
}